// Generated by gencpp from file lab_2/actionFeedback.msg
// DO NOT EDIT!


#ifndef LAB_2_MESSAGE_ACTIONFEEDBACK_H
#define LAB_2_MESSAGE_ACTIONFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lab_2
{
template <class ContainerAllocator>
struct actionFeedback_
{
  typedef actionFeedback_<ContainerAllocator> Type;

  actionFeedback_()
    : feeddback(0)  {
    }
  actionFeedback_(const ContainerAllocator& _alloc)
    : feeddback(0)  {
  (void)_alloc;
    }



   typedef int64_t _feeddback_type;
  _feeddback_type feeddback;





  typedef boost::shared_ptr< ::lab_2::actionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lab_2::actionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct actionFeedback_

typedef ::lab_2::actionFeedback_<std::allocator<void> > actionFeedback;

typedef boost::shared_ptr< ::lab_2::actionFeedback > actionFeedbackPtr;
typedef boost::shared_ptr< ::lab_2::actionFeedback const> actionFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lab_2::actionFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lab_2::actionFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lab_2::actionFeedback_<ContainerAllocator1> & lhs, const ::lab_2::actionFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.feeddback == rhs.feeddback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lab_2::actionFeedback_<ContainerAllocator1> & lhs, const ::lab_2::actionFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lab_2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lab_2::actionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lab_2::actionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab_2::actionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab_2::actionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab_2::actionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab_2::actionFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lab_2::actionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77e2688e9a23836b8b093bb09e37e8cb";
  }

  static const char* value(const ::lab_2::actionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77e2688e9a23836bULL;
  static const uint64_t static_value2 = 0x8b093bb09e37e8cbULL;
};

template<class ContainerAllocator>
struct DataType< ::lab_2::actionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lab_2/actionFeedback";
  }

  static const char* value(const ::lab_2::actionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lab_2::actionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int64 feeddback\n"
"\n"
;
  }

  static const char* value(const ::lab_2::actionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lab_2::actionFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feeddback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct actionFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lab_2::actionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lab_2::actionFeedback_<ContainerAllocator>& v)
  {
    s << indent << "feeddback: ";
    Printer<int64_t>::stream(s, indent + "  ", v.feeddback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAB_2_MESSAGE_ACTIONFEEDBACK_H
